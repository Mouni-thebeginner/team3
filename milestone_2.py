# -*- coding: utf-8 -*-
"""Milestone 2.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1P9DMOA08kar985yLWt6hwlW7MrpZiQDV
"""

from google.colab import files
uploaded = files.upload()

# Import libraries
import pandas as pd
import nltk
from nltk.stem import WordNetLemmatizer
from nltk.tokenize import word_tokenize
from nltk.corpus import stopwords
from sklearn.model_selection import train_test_split
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.linear_model import LogisticRegression

# Download NLTK resources
nltk.download("punkt")
nltk.download("punkt_tab")   # âœ… Fix LookupError
nltk.download("wordnet")
nltk.download("stopwords")

# Load dataset
df = pd.read_csv("fake_job_postings.csv", encoding="latin-1")

# Function to preprocess text
def preprocess_text(text):
    if pd.isna(text):
        return ""
    text = text.lower()
    tokens = word_tokenize(text)
    tokens = [w for w in tokens if w.isalpha()]
    stop_words = set(stopwords.words("english"))
    tokens = [word for word in tokens if word not in stop_words]
    lemmatizer = WordNetLemmatizer()
    lems = [lemmatizer.lemmatize(word) for word in tokens]
    return " ".join(lems)

print("\nðŸ”„ Preprocessing data...")
df["description_clean"] = df["description"].apply(preprocess_text)
df = df.dropna(subset=["fraudulent"])  # Drop rows with missing target
print("âœ… Preprocessing complete!")

# Show first 5 preprocessed rows
print("\nðŸ“Š First 5 Preprocessed Rows:")
print(df[["title", "description", "description_clean"]].head(5))

# Features (X) and Target (y)
X = df["description_clean"]
y = df["fraudulent"]

# Convert text into TF-IDF features
vectorizer = TfidfVectorizer(max_features=5000)
X_tfidf = vectorizer.fit_transform(X)

# Train-Test Split
X_train, X_test, y_train, y_test = train_test_split(
    X_tfidf, y, test_size=0.2, random_state=42, stratify=y
)

print("\nðŸ”„ Training model...")
model = LogisticRegression(max_iter=1000)
model.fit(X_train, y_train)
print("âœ… Training complete!")

print("\nðŸ”„ Testing model...")
y_pred = model.predict(X_test)
print("âœ… Testing complete!")

# Show first 5 actual vs predicted results
results = pd.DataFrame({
    "Job Title": df.loc[y_test.index, "title"].values[:5],
    "Actual": y_test.values[:5],
    "Predicted": y_pred[:5]
})

print("\nðŸ“Š First 5 Test Results:")
print(results.to_string(index=False))

print("\nâœ… All steps complete! (Preprocessing + Training + Testing)")